#! /usr/bin/env python3

# Tweaker tool for MATE
# Author: jssouza

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from gi.repository import Gio
from subprocess import run
import time

class MateTweaker:
	builder = Gtk.Builder()

	def __init__(self):
		self.builder.add_from_file("/usr/local/bin/mate-tweaker.ui")
		window = self.builder.get_object("main_window")
		window.connect("delete-event", Gtk.main_quit)
		window.connect("destroy", Gtk.main_quit) 
		bt_quit = self.builder.get_object("bt_quit")
		bt_quit.connect("clicked", self.on_quit_button_clicked)

		# Desktop Icons
		settings = self.get_settings("org.mate.caja.desktop", "computer-icon-visible")
		if settings is not None:
			self.bind_settings(settings, "computer-icon-visible", "cb_computer")   
		settings = self.get_settings("org.mate.caja.desktop", "home-icon-visible") 
		if settings is not None:
			self.bind_settings(settings, "home-icon-visible", "cb_home")    
		settings = self.get_settings("org.mate.caja.desktop", "network-icon-visible")
		if settings is not None:
			self.bind_settings(settings, "network-icon-visible", "cb_network")    
		settings = self.get_settings("org.mate.caja.desktop", "trash-icon-visible")
		if settings is not None:
			self.bind_settings(settings, "trash-icon-visible", "cb_trash")    
		settings = self.get_settings("org.mate.caja.desktop", "volumes-visible")
		if settings is not None:
			self.bind_settings(settings, "volumes-visible", "cb_volumes")    

		# Brisk Menu
		settings = self.get_settings("com.solus-project.brisk-menu", "dark-theme")
		if settings is not None:
			self.bind_settings(settings, "dark-theme", "cb_dark_theme")   
		settings = self.get_settings("com.solus-project.brisk-menu", "rollover-activate") 
		if settings is not None:
			self.bind_settings(settings, "rollover-activate", "cb_rollover")    
		settings = self.get_settings("com.solus-project.brisk-menu", "label-visible")
		if settings is not None:
			self.bind_settings(settings, "label-visible", "cb_menu_label")    

		key = "search-position"
		settings = self.get_settings("com.solus-project.brisk-menu", key)
		if settings is not None:
			rb_top = self.builder.get_object("rb_top")
			rb_bottom = self.builder.get_object("rb_bottom")
			value = settings.get_string(key)
			if value == "top":
			    rb_top.set_active(True)
			else:
			    rb_bottom.set_active(True)        
			rb_top.connect("toggled", self.on_rb_search_toggled, "rb_top", settings, key)
			rb_bottom.connect("toggled", self.on_rb_search_toggled, "rb_bottom", settings, key)

		# Panel Layout    
		key = "default-layout"
		settings = self.get_settings("org.mate.panel", key)    
		if settings is not None:
			rb_p4 = self.builder.get_object("rb_p4")
			rb_p3 = self.builder.get_object("rb_p3")
			rb_def = self.builder.get_object("rb_def")
			value = settings.get_string(key)
			if value == "porteus4":
			    rb_p4.set_active(True)
			elif value == "porteus3":
			    rb_p3.set_active(True)        
			else:
			    rb_def.set_active(True)        
			rb_p4.connect("toggled", self.on_rb_layout_toggled, "rb_p4")
			rb_p3.connect("toggled", self.on_rb_layout_toggled, "rb_p3")
			rb_def.connect("toggled", self.on_rb_layout_toggled, "rb_def")

		# HiDPI
		key = "window-scaling-factor"
		settings = self.get_settings("org.mate.interface", key)    
		if settings is not None:
			rb_hidpi_auto = self.builder.get_object("rb_hidpi_auto")
			rb_hidpi_reg = self.builder.get_object("rb_hidpi_reg")
			rb_hidpi_hidpi = self.builder.get_object("rb_hidpi_hidpi")
			value = settings.get_int(key)
			if value == 0:
			    rb_hidpi_auto.set_active(True)
			elif value == 1:
			    rb_hidpi_reg.set_active(True)        
			else:
			    rb_hidpi_hidpi.set_active(True)        
			rb_hidpi_auto.connect("toggled", self.on_rb_hidpi_toggled, "rb_hidpi_auto", settings, key)
			rb_hidpi_reg.connect("toggled", self.on_rb_hidpi_toggled, "rb_hidpi_reg", settings, key)
			rb_hidpi_hidpi.connect("toggled", self.on_rb_hidpi_toggled, "rb_hidpi_hidpi", settings, key)

		window.show_all() 

	def on_rb_search_toggled(self, widget, widget_name, settings, key):
		if widget.get_active():
		    if widget_name == "rb_top":
		        value = "top"
		    elif widget_name == "rb_bottom":
		        value = "bottom"
		    settings.set_string(key, value)

	def on_rb_layout_toggled(self, widget, widget_name):
		if widget.get_active():
			if widget_name == "rb_p4":
				run(['mate-panel', '--reset', '--layout', 'porteus4']) 
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/bottom/background/', 'type', 'color']) 	
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/bottom/background/', 'color', 'rgba(1,1,1,1)']) 
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel:/org/mate/panel/toplevels/bottom/', 'size', '29']) 										
			elif widget_name == "rb_p3":
				run(['mate-panel', '--reset', '--layout', 'porteus3']) 
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/top/background/', 'type', 'color']) 	
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/top/background/', 'color', 'rgba(1,1,1,0.37)']) 
				time.sleep(1)
				run(['dconf', 'write', '/org/mate/panel/objects/workspace-switcher/prefs/num-rows', '2']) 
			elif widget_name == "rb_def":
				run(['mate-panel', '--reset', '--layout', 'mate']) 
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/top/background/', 'type', 'color']) 	
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/top/background/', 'color', 'rgba(1,1,1,0.37)']) 	
				time.sleep(1)				
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/bottom/background/', 'type', 'color']) 	
				time.sleep(1)
				run(['gsettings', 'set', 'org.mate.panel.toplevel.background:/org/mate/panel/toplevels/bottom/background/', 'color', 'rgba(1,1,1,1)'])

	def on_rb_hidpi_toggled(self, widget, widget_name, settings, key):
		if widget.get_active():
		    if widget_name == "rb_hidpi_auto":
		        scaling = 0
		    elif widget_name == "rb_hidpi_reg":
		        scaling = 1
		    elif widget_name == "rb_hidpi_hidpi":
		        scaling = 2
		    settings.set_int(key, scaling)

	def get_settings(self, schema_id, key):
		schema_src = Gio.SettingsSchemaSource.get_default()
		schema = schema_src.lookup(schema_id, True)
		if schema:
		    settings = Gio.Settings.new_full(schema)
		    return settings
		return None    

	def bind_settings(self, settings, key, widget_id):
		    widget = self.builder.get_object(widget_id)
		    settings.bind(key, widget, "active", Gio.SettingsBindFlags.DEFAULT)

	def on_quit_button_clicked(self, widget):
		info_dialog = self.builder.get_object("info_dialog")
		info_dialog.run()
		info_dialog.destroy()
		Gtk.main_quit()
		

mate_tweaker = MateTweaker()
Gtk.main()
