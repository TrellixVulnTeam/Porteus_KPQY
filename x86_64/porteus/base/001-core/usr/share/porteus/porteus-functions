## This is a library of commonly used functions that can be sourced
## from your shell scripts. The 'is' functions will return a '0' value
## if successful or a '1' value if it failed.

pext=xzm
###############################
# get_config_value
#
# used to get the value of a STRING=VAR value in a file.
# Values must be on a new line and start at beginning of line.
# In the case of multiple values the last value will be taken.
#
# $1=string $2=file
###############################
get_config_value(){ awk -F= '/^'$1'/{print$NF}' $2 | tail -n1; }

###############################
# get_colors
#
# Sourcing this funtion will generate a console color scheme.
# You can then simply issue: bold "This is my bold text"
#
# Available colors: red, green, cyan, bold
###############################
get_colors(){
txtbld=$(tput bold)
txtred=${txtbld}$(tput setaf 1)
txtgreen=${txtbld}$(tput setaf 2)
txtwhite=${txtbld}$(tput setaf 7)
txtcyan=${txtbld}$(tput setaf 6)
rst=$(tput sgr0)
function bold(){ echo -e $txtbld "$1" $rst; }
function green() { echo -e $txtgreen "$1" $rst; }
function red(){ echo $txtred "$1" $rst; }	
function cyan(){ echo $txtcyan "$1" $rst; }	
}

###############################
# get_md5
#
# Returns the md5sum value of a file
# $1=/path/to/file
###############################
get_md5(){
if [ -f $1 ]; then
md5sum $1 | cut -d' ' -f1
fi	
}

###############################
# is_saving_changes
#
# Checks to see if user is saving changes.
###############################
is_saving_changes(){
egrep -qo " changes=[^ ]+" /proc/cmdline | cut -d= -f2 || \
grep "^changes=" /etc/porteus.d/cheatcodes
}

###############################
# get_changes_dir
#
# Will return the changes folder if available
###############################
get_changes_dir(){
egrep -o " changes=[^ ]+" /proc/cmdline | cut -d= -f2 || \
awk -F= '/^changes=/{print$NF}' /etc/porteus.d/cheatcodes
}

###############################
# get_user_home(
#
# Will return the current users home directory
###############################
get_user_home(){
getent passwd $USER | cut -d: -f6
}

###############################
# get_user_list(
#
# Will return the current non UID 0 users
# in an array called USERLIST
###############################
get_user_list(){
for a in `ls -1 /home`; do
	if [ `getent passwd $a` ]; then
		USERLIST+=( $a )
	fi
done
}

###############################
# get_desktop
#
# Will return the current desktop
###############################
get_desktop(){
if [ $XDG_DESKTOP_SESSION ]; then
	DESKTOP=$XDG_DESKTOP_SESSION
		else
case `echo $XDG_CURRENT_DESKTOP` in
	X-Cinnamon)
	DESKTOP=cinnamon ;;
	LXDE)
	DESKTOP=lxde ;;
	LXQt)
	DESKTOP=lxqt ;;
	MATE)
	DESKTOP=mate ;;
	KDE)
	DESKTOP=kde ;;
	XFCE)
	DESKTOP=xfce ;;
esac
fi
}

###############################
# is_porteus
#
# Checks to see if distrois porteus
###############################
is_porteus(){ [ -f /etc/porteus-version ] && return 0 || return 1; }
	
###############################
# is_root
#
# Checks to see if user is root
###############################
is_root(){ [ `whoami` = "root" ] && return 0 || return 1; }

###############################
# is_writable
#
# Checks to see if a path is writable
#
# $1=path
###############################
is_writable(){ [ -w $1 ]; }

###############################
# is_mounted
#
# Checks if a partition is mounted
#
# $1=sdXy
###############################
is_mounted(){ awk '/\/dev\/'$1'/{print$1}' /proc/mounts	; }

###############################
# is_mounted_porteus
#
# Checks if the partition porteus booted from is mounted
###############################
is_mounted_porteus(){ grep -wqo $BOOTDEV /proc/mounts; }

###############################
# is_x
#
# Checks if the session is graphical
###############################
is_x(){ [ `tset -q` = "xterm" ] && [ ! -z "$DISPLAY" ] && return 0 || return 1; }

###############################
# is_online_url
#
# Checks if a link is up
# $1=http://www.google.com/file.tar.xz
###############################
is_online_url(){ ( wget -q --spider --force-html --inet4-only $1 >/dev/null 2>&1 ); }

###############################
# is_online
#
# Checks if internet is available
###############################
is_online(){ ping -q -w 1 -c 1 `ip r | awk '/default/{print$3}'|head -n1` >/dev/null 2>&1; }

###############################
# is_mountpoint
#
# Checks if a dir is a mountpoint
# $1=/path/to/directory
###############################
is_mountpoint(){ mountpoint "$1" >/dev/null ; }

###############################
# is_posix
#
# Checks if a dir is on a posix file system
# $1=/path/to/directory
###############################
is_posix(){
f1=$1/._test1
f2=$1/._test2
touch $f1
ln -s $f1 $f2 2>/dev/null && chmod +x $f1 2>/dev/null && [ -x $f1 ] && \
chmod -x $f1 2>/dev/null && [ ! -x $f1 ] && rm -f $f1 $f2
}

###############################
# is_64bit
#
# Checks if an architecture is 64bit
###############################
is_64bit(){ [ "$HOSTTYPE" == "x86_64" ] ;}

###############################
# is_efi
#
# Checks if a system booted as EFI
###############################
is_efi(){ [ -d /sys/firmware/efi ] && return 0 || return 1; }

###############################
# is_aufs
#
# Checks if a path is in aufs file system
# $1=/path/to/directory
###############################
is_aufs(){ [ `df -l --no-sync --output=fstype $1 | tail -1` = "aufs" ]; }

###############################
# is_king
#
# Checks if a user has elevated privileges
# $1=/path/to/directory
###############################
is_king(){
x=`whoami`
[ $UID -eq 0 ] && return 0
getent group wheel | grep -qwo "$x" 2>/dev/null && return 0
return 1
}

###############################
# is_command
#
# Checks that a command exists
# $1=command
###############################
is_command(){ command -pV >/dev/null 2>&1; }

###############################
# is_tmpfs
#
# Checks if a path is in tmpfs file system
# $1=/path/to/directory
###############################
is_aufs(){ [[ `df -l --no-sync --output=fstype $1 | tail -1` = "tmpfs" ]]; }

###############################
# is_module
#
# Checks if a file is a porteus module
# $1=/path/to/file
###############################
is_module(){ [ `file $1|egrep -o "endian|data"` ] ;}

############################################################# CLI

###############################
# menu_from_variable
#
# Creates a CLI menu from contents of a variable
# Don't forget to set IFS=$'\n' if variables have spaces.
###############################
menu_from_variable(){
echo
echo "`gettext " The following items were found."`"
cyan "`gettext "Choose an number to confirm."`"
echo "`gettext " ctrl+c to quit"`" && echo
select CHOICE in $RESULT; do
    if [ -z "$CHOICE" ]; then
        bold "`gettext "Invalid choice!"`" && echo
        $FUNCNAME
    fi
    break
done
}

###############################
# menu_from_array
#
# Creates a CLI menu from contents of an array.
# Similar to menu_from_variable but with more control over strings.
# Don't forget to set IFS=$'\n' if variables have spaces.
#
# $1=text $2=text $3=text
###############################
menu_from_array(){
echo
echo "$1"
echo "$2" && echo
select CHOICE in ${RESULT[@]}; do
    if [ -z "$CHOICE" ]; then
        bold "`gettext "Invalid choice!"`" && echo
        $FUNCNAME
    fi
    break
done
}

###############################
# get_cheatcode_value
#
# Checks if a cheatcode value exists
###############################
get_cheatcode_value(){
unset cheatval
local cfg=/etc/porteus.d/$2
cheatval=`egrep -o " $1=[^ ]+" /proc/cmdline | cut -d= -f2`

if [ -z "$cheatval" ]; then
	if [ -f $cfg ]; then
		echo
		cheatval=`awk -F= '/^'$1'/{print$NF}' $cfg`
	fi
fi
}

###############################
# get_cheatcode_param
#
# Checks if a cheatcode parameter exists
###############################
get_cheatcode_param(){
local cfg=/etc/porteus.d/$2
egrep -qo " $1( |\$)" /proc/cmdline || egrep -qo "^$1 " $cfg 2>/dev/null
}

###############################
# get_server
#
# Gets the current Porteus server from /etc/porteus.conf
###############################
get_server(){
if [ -e /etc/porteus.conf ]; then
	SERVER=`awk -F= '/SERVER=/{print$NF}' /etc/porteus.conf`
fi
}

###############################
# download
#
# A simple download percent progress
###############################
download() {
local url=$1
local file=${url##*/}

dloadInProgress=$url

echo -n "Downloading: $file --> "
wget $url -P $2 2>&1 | grep --line-buffered "%" |sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
echo -ne "\b\b\b\b"
echo " DONE"
unset dloadInProgress
}

########################################################################
# upload
#
# Transfer a file to transfer.sh from a command line
########################################################################
upload() {
    # write to output to tmpfile because of progress bar
    tmpfile=$( mktemp -t transferXXX )
    curl --progress-bar --upload-file $1 https://transfer.sh/$(basename $1) >> $tmpfile;
    cat $tmpfile;
    rm -f $tmpfile;
}

########################################################################
# sayok
#
# [OK] in green
########################################################################
sayok(){
echo "[${txtbold}${txtgreen}OK$rst] $1"
}

########################################################################
# sayupdate
#
# [UPDATE] in red
########################################################################
sayupdate(){
echo "[${txtbold}${txtred}UPDATE$rst] $1"
}

########################################################################
# sayerror
#
# [ERROR] in red
########################################################################
sayerror(){
echo "[${txtbold}${txtred}ERROR$rst] $1"
}
