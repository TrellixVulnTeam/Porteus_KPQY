#!/bin/bash
## This script will create a gtkdialog window
## that will allow users to select a sound card
## to use as their default.

## script by Ahau, this is free software under the terms of GPL3 license.

. /usr/lib/librokenman

## Switch to root -- uncomment this if we want this application to only run as root.

if [ `whoami` != "root" ]; then
  /opt/porteus-scripts/xorg/psu "$0"
  exit
fi

exec 2>/dev/null
#set -x

## Variables
export SNDSET="/tmp/sndset_$$"
[ -d $SNDSET ] && rm -r $SNDSET
mkdir -p $SNDSET
unset viruns
	
## Is user using changes= ?
change_loc=`grep -i -A1 "changes are stored" /var/log/porteus-livedbg |tail -n1`
[[ "$change_loc" != "memory" && "$change_loc" != "none" ]] && using_changes=1 || unset using_changes	
	
## Can we see modules folder?
modf=`ls -l /mnt/live/porteus/modules|awk '{print$NF}'`
[ -w $modf ] && export mods=${modf} || unset mods modf

#this is here mostly so I can test alternative configs
cardsfile=/proc/asound/cards
modsfile=/proc/asound/modules

#cardsfile=/mnt/sdb2/devel/3.0/test/cards
#modsfile=/mnt/sdb2/devel/3.0/test/modules

#give us a simple way to exit cleanly
clean_exit()
{
rm -rf $SNDSET
rm /tmp/.snd_config*
exit
}; export -f clean_exit
	
# We have to redefine this to fix some icons and other issues
gtk_message_warn(){
echo '
<window window_position="1" title="Porteus message" image-name="/usr/share/pixmaps/porteus/dialog-warning.svg" allow-shrink="false" width-request="'$2'">
<vbox>
 <hbox>
  <frame>
  <pixmap>
   <input file>"/usr/share/pixmaps/porteus/dialog-warning.svg"</input>
  </pixmap>
  </frame>
  <frame>
  <text wrap="true"><label>"'$1'"</label></text>
  </frame>
 </hbox>
 <hbox>
  <button ok></button>
 </hbox>
</vbox>
<action signal="hide">exit:abort main window by X</action>
</window>
' | gtkdialog -s
}; export -f gtk_message_warn

	
## generate soundcard/driver list
grep -e '^ [0-9]' $cardsfile |sed -e 's/^ //g' > $SNDSET/proclist

cat $modsfile|sed 's/^ //g'  > $SNDSET/modlist
 
#find number of cards listed
numlines=`wc $SNDSET/proclist |awk '{print$1}'`

#if a user only has one sound card, they don't need to run this utility.
#some systems my only show one card in /proc/asound while showing two
#cards in lspci -- we want our utility to run for them.
numberofcards=$numlines
if [ "$numberofcards" -le "1" ]; then
  numberofcards=`lspci|grep -i audio|wc|awk '{print$1}'`
fi
#***************UNCOMMENT FOR PRODUCTION MODE!!!************************
[ "$numberofcards" -le "1" ] && gtk_message_warn "One or fewer sound cards were detected on your system, so this utility is not needed.  If your sound is not working properly, please post a report on our forum at http://porteus.org/forum." 500 && clean_exit

curline=1

while [ "$curline" -le "$numlines" ]; do
  unset procline cardnum cardname cardshort cardmod cardvid cardpid
  procline=`head -n$curline $SNDSET/proclist|tail -n1`
  cardnum=`echo $procline|awk '{print$1}'`
  cardname=`echo $procline|awk -F: '{print$2}'`
  cardshort=`echo $procline|awk -F[ '{print$2}'|awk '{print$1}'`
  if [ "$cardname" ]; then
    cardmod=`grep -e "^$cardnum" $SNDSET/modlist|awk '{print$2}'`
    cardvid=`cat /proc/asound/card$cardnum/usbid|awk -F: '{print$1}'` 
    cardpid=`cat /proc/asound/card$cardnum/usbid|awk -F: '{print$2}'`
    cardname=`echo $cardshort:$cardname`
    echo $cardname >> $SNDSET/cardlist
    echo $cardname~$cardmod~$cardvid~$cardpid >> $SNDSET/cardmodlist
  fi
  (( curline++ ))
done

## this will warn a user if they have multiple PCI sound cards using the driver.  This script won't fix their issues.
check_duplicates()
{
if [ "$defaultdriver" != "snd_usb_audio" ] && [ " $defaultdriver" != "snd-usb-audio" ]; then
  drivercardcount=`grep $defaultdriver $SNDSET/cardmodlist|wc|awk '{print$1}'`
  #check if the driver for the selected card has more than one device associated with it
  #this happens, for example, with single cards that show up as multiple devices
  if [ "$drivercardcount" -gt "1" ]; then
    #gtk_message_warn "You appear to have selected an on-board sound card that uses the same driver as another card on this system.  This type of setup is not well supported by this application and may require a custom udev rule.  This action will continue, but please ask for more assistance on the Porteus forum at http://porteus.org/forum if this application does not resolve your issues." 550 && return
    #Now, we're going to try and make this work :)
    defaultshortname=`grep "$defaultcard" $SNDSET/cardlist|awk -F: '{print$1}'`
    cat > $SNDSET/asound.conf << EOF
pcm.!default {
   type hw
   card $defaultshortname
}

ctl.!default {
   type hw           
   card $defaultshortname
}
EOF
  fi
fi
	
}; export -f check_duplicates

## Build and display a list of programs/processes that are holding sound devices open
## and preventing drivers from unloading
list_procs()
{
rm $SNDSET/open_procs
for a in `lsof /dev/snd/*|awk '{print$2}'|grep -vi pid|sort -u`; do 
  unset foxtest
  foxtest=`ps ax|grep $a|grep firefox`
  if [ "$foxtest" ]; then
    echo "Mozilla Firefox" >> $SNDSET/open_procs
  else
    ps ax|grep $a|grep -v grep|awk '{print$5}' >> $SNDSET/open_procs
  fi;
done	

testprocs=`cat $SNDSET/open_procs`
if [ "$testprocs" ]; then
  . /usr/lib/librokenman
  export PROCWARN='<window window_position="1" title="Close running programs..." image-name="/usr/share/pixmaps/porteus/dialog-warning.svg" allow-shrink="false" width-request="500">
<vbox>
 <hbox>
  <frame>
  <pixmap>
   <input file>"/usr/share/pixmaps/porteus/dialog-warning.svg"</input>
  </pixmap>
  </frame> 
  <frame>
  <vbox>
  <hbox>
  <text wrap="true"><label>"One or more programs that utilize your sound device(s) are currently running on your system. Please try closing the following programs, then click '"'Apply'"' again:
  "</label></text>
  </hbox>
  <hbox>

  <vbox>
   <text use-markup="true" xalign="0" wrap="true">
    	<input file>'$SNDSET'/open_procs</input></text>
  </vbox>
    <vbox>
<text width-request="200"><label>""</label></text>
  </vbox>
  </hbox>
  </vbox>
  </frame>
 </hbox>
 <hbox>
  <button ok></button>
 </hbox>
</vbox>
<action signal="hide">exit:abort main window by X</action>
</window>

'
gtkdialog -p PROCWARN > /tmp/.snd_config_procwarn

else
  gtk_message_warn "Some of your sound drivers will not unload, please close all applications that have sound support and retry.  If this error persists, please try logging out/in or rebooting." 450
fi

}; export -f list_procs

set_path()
{
if [ "$1" = "root" ]; then
  export HPTH=/root
else
  export HPTH=/home/$1
fi
	
}; export -f set_path

## Set selected sound card as the system wide default in the live session only
apply_live()
{
. /usr/lib/librokenman

manual_progress "Applying settings.  Please wait..."

echo "disabling panel mixers" > /tmp/.message

#check for and kill sound services that might be running in the background
xfceuser=`ps aux | grep xfce4-session | egrep -v 'launch|grep' | cut -d " " -f1`
if [ "$xfceuser" ]; then
  for a in "$xfceuser"; do
    set_path $a
    if [ -e $HPTH/.config/autostart/volumeicon.desktop ]; then
      echo "$a" >> $SNDSET/vi_cmds
    fi
    vipid=`ps U $a|grep -v grep|grep volumeicon|awk '{print$1}'`
    [[ $vipid ]] && echo "$a" >> $SNDSET/vi_cmds && kill $vipid;
  done
fi

#deactivate the temporary module if for some reason it is still active
if grep tempsnd_setmod.xzm /proc/mounts; then
  /opt/porteus-scripts/xorg/aufs-remove tempsnd_setmod.xzm
  sleep 1
fi

lxuser=`ps aux | grep lxsession | grep -v grep | cut -d " " -f1`
if [ "$lxuser" ]; then
  for a in "$lxuser"; do
    lxpcmd=`ps U $a |grep -v grep|grep -v sed|grep lxpanel|sed -e 's/^.*lxpanel/lxpanel/g'`
    panelid=`ps U $a|grep -v grep|grep lxpanel|awk '{print$1}'`
    echo "$a~$lxpcmd" >> $SNDSET/lxpanel_cmds
    kill $panelid; 
  done
fi

rzuser=`ps aux | grep razor-session | grep -v grep | cut -d " " -f1`
if [ "$rzuser" ]; then
  for a in "$rzuser"; do
  su --login $a -c "qdbus org.razorqt.session /RazorSession stopModule razor-panel.desktop";  
  done
fi

kdeuser=`ps aux | grep /usr/bin/startkde | grep -v grep | cut -d" " -f1`
if [ "$kdeuser" ]; then
#  karch=`uname -m`
####TRINITY STUFF HERE
#  if [ "$karch" = "i686" ]; then
#    for a in "$kdeuser"; do
#      unset artscmd
#      artscmd=`ps U $a |grep -v grep|grep -v sed|grep "/usr/bin/artsd"|sed -e 's@^.*/usr/bin/artsd@/usr/bin/artsd@g' -e 's/ /_/g'`
#      if [ "$artscmd" ]; then
#        echo "$a~$artscmd" >> $SNDSET/arts_cmds
#        su --login $a -c "kill `pidof artsd`"
#      fi; 
#    done
#  else  
  ##KDE4 STUFF HERE
    for a in "$kdeuser"; do
      kdedkmixd=`su --login $a -c "qdbus org.kde.kded|grep kmixd"`
      [[ $kdedkmixd ]] && echo "$a~qdbus_org.kde.kded_/kded_loadModule_kmixd" >> $SNDSET/kde4_cmds && su --login $a -c "qdbus org.kde.kded /kded unloadModule kmixd"
      kmixid=`ps U $a|grep -v grep|grep -w kmix|awk '{print$1}'`
      [[ $kmixid ]] && echo "$a~kmix" >> $SNDSET/kde4_cmds
      kill $kmixid;
    done
#  fi
fi


echo "checking existing drivers" > /tmp/.message

#let the system settle after killing processes above
sleep 1

#check to see if all drivers can be killed
unset rmwillfail
for a in `cat $SNDSET/cardmodlist|awk -F~ '{print$2}'`; do
  modprobe -rn $a
  [ "$?" -ne 0 ] && rmwillfail=true;
done
if [ "$rmwillfail" = "true" ]; then
  kill_manual_progress
  list_procs
else

  #drop drivers for real this time.
  echo "unloading existing drivers" > /tmp/.message
  unset rmfailed
  for a in `cat $SNDSET/cardmodlist|awk -F~ '{print$2}'`; do
    rmmod $a
    unset ismodactive
    ismodactive=`lsmod|grep -w $a`
    [[ "$ismodactive" ]] && rmfailed=true;
  done

  if [ "$rmfailed" = "true" ]; then
    echo "error unloading; restoring previous state" > /tmp/.message
    #try to bring them all back in the same order
    unset reloadfailed
    for a in `cat $SNDSET/cardmodlist|awk -F~ '{print$2}'`; do
      modprobe $a
      [ "$?" -ne 0 ] && reloadfailed=true
      sleep 1;
    done
    if [ "$reloadfailed" = "true" ]; then
      kill_manual_progress
      gtk_message_warn "Some of your drivers failed to unload, and then failed to reload.  Please reboot your system to restore all devices and try again." 500 && exit
    else
      kill_manual_progress
      gtk_message_warn "Sound drivers failed to unload, so all drivers were reloaded.  Please close all applications that support sound and try again." 500 && exit
    fi
  fi

  ## bring all drivers back up in the new order
  echo "finding default driver" > /tmp/.message
  
  export defaultcard=`cat $SNDSET/dump|grep "default card is"|tail -n 1|sed 's/default card is //g'`
  export defaultdriver=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$2}'`

  check_duplicates
  [ -e $SNDSET/asound.conf ] && cp $SNDSET/asound.conf /etc/

  #set the vid and pid for usb devices to ensure the specified device is picked first
  unset loadfailed
  if [ "$defaultdriver" = "snd_usb_audio" -o "$defaultdriver" = "snd-usb-audio" ]; then
    echo "loading driver for specified card" > /tmp/.message
    unset defvid
    unset defpid
    defvid=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$3}'`
    defpid=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$4}'`
    sleep 1
    if [ "$defvid" ] && [ "$defpid" ]; then
      modprobe $defaultdriver index=0 vid=0x$defvid pid=0x$defpid
      [ "$?" -ne 0 ] && loadfailed=true
    else
      modprobe $defaultdriver index=0
      [ "$?" -ne 0 ] && loadfailed=true
    fi
  else
    echo "loading driver for specified card" > /tmp/.message
    sleep 1
    modprobe $defaultdriver index=0
    [ "$?" -ne 0 ] && loadfailed=true
  fi

  echo "loading drivers for other cards, if present" > /tmp/.message
  #load other modules
  sleep 1
  for a in `cat $SNDSET/cardmodlist|awk -F~ '{print$2}'|grep -v "$defaultdriver"`; do
    modprobe $a
    [ "$?" -ne 0 ] && loadfailed=true
    sleep 1;
  done

fi
echo "restarting services..." > /tmp/.message
[ -e $SNDSET/asound.conf ] && /etc/rc.d/rc.alsa restart

#restart volumeicon if it was running or if it was set to autostart (it may have failed if sound device was wrong
if [ -e $SNDSET/vi_cmds ]; then
  for x in `cat $SNDSET/vi_cmds|sort -u`; do su $x -p -c "nohup volumeicon &"; done
fi

#restart lxde panel
if [ "$lxuser" ]; then
  for x in "$lxuser"; do su --login $x -p -c "rm ~/.cache/menus/*; nohup `grep $x $SNDSET/lxpanel_cmds|awk -F~ '{print$2}'|tail -1` &"; done
fi

#restart razor panel
if [ "$rzuser" ]; then
  for x in "$rzuser"; do
  su --login $x -c "qdbus org.razorqt.session /RazorSession startModule razor-panel.desktop";  
  done
fi

if [ "$kdeuser" ]; then

###REMOVE TRINITY REFERENCE###
#  if [ "$karch" = "i686" ]; then
#    for x in "$kdeuser"; do 
#      for a in `grep $x $SNDSET/arts_cmds|awk -F~ '{print$2}'|sort -u`; do
#        su --login $x -c "nohup `echo $a|sed 's/_/ /g'` &"; 
#      done;
#    done
#  else 
  
#restart kde4 stuff
    for x in "$kdeuser"; do 
      for a in `grep $x $SNDSET/kde4_cmds|awk -F~ '{print$2}'|sort -u`; do
        su --login $x -c "nohup `echo $a|sed 's/_/ /g'` &"; 
      done;
    done;
#  fi
fi

kill_manual_progress

if [ "$loadfailed" = "true" ]; then
  gtk_message_warn "Some error occurred while attempting to load your sound drivers.  Please try again.  If this error persists, you may need to reboot in order to restore functionality for all of your sound devices." 450
elif [ "$rmwillfail" != "true" ]; then
  gtk_message "Your settings have been applied." 350 gtk-yes
fi

}; export -f apply_live

module_warning()
{
. /usr/lib/librokenman

##warning screen about modules conflicting with other hardware
export MODWARN='<window window_position="1" title="Continue with build?" image-name="/usr/share/pixmaps/porteus/dialog-warning.svg" allow-shrink="false" width-request="550">
<vbox>
 <hbox>
  <frame>
  <pixmap>
   <input file>"/usr/share/pixmaps/porteus/dialog-warning.svg"</input>
  </pixmap>
  </frame> 
  <frame>
  <text wrap="true"><label>"Note that if you build a module with these settings and use it on another machine with different hardware, it may override the default card on that system.

To remedy this, you can run this tool again on that system, or use the '"'noload='"' cheatcode to avoid loading this module when you boot Porteus on your other system.
  
Example:  '"'noload=soundcard_config'"'
  
Read /boot/docs/cheatcodes.txt for more information on that and other cheatcodes.

Click '"'OK'"' to continue building the module or '"'Cancel'"' to stop here."</label></text>
  </frame>
 </hbox>
 <hbox>
  <button cancel></button>
  <button ok></button>
 </hbox>
</vbox>
<action signal="hide">exit:abort main window by X</action>
</window>
'
gtkdialog -p MODWARN > /tmp/.snd_config_modwarn

}; export -f module_warning

##build a module to apply settings to future logins.
build_config_module()
{
. /usr/lib/librokenman

module_warning

## Did user cancel ?
[ `egrep -o "Cancel|abort" /tmp/.snd_config_modwarn` ] && exit

export defaultcard=`cat $SNDSET/dump|grep "default card is"|tail -n 1|sed 's/default card is //g'`
export defaultdriver=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$2}'`

check_duplicates

#set the default driver to first slot
mkdir -p $SNDSET/fakeroot/etc/modprobe.d/
echo "options snd slots=$defaultdriver" > $SNDSET/fakeroot/etc/modprobe.d/alsa_order.conf
[ -e $SNDSET/asound.conf ] && cp $SNDSET/asound.conf $SNDSET/fakeroot/etc/

#set the vid and pid for usb devices to ensure the specified device is picked first
if [ "$defaultdriver" = "snd_usb_audio" -o "$defaultdriver" = "snd-usb-audio" ]; then
  unset defvid
  unset defpid
  defvid=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$3}'`
  defpid=`grep "$defaultcard" $SNDSET/cardmodlist|awk -F~ '{print$4}'`
  if [ "$defvid" ] && [ "$defpid" ]; then
    echo "options snd_usb_audio vid=0x$defvid pid=0x$defpid" >> $SNDSET/fakeroot/etc/modprobe.d/alsa_order.conf
  fi
fi

if [ "$mods" ]; then
  ## The modules folder is available
  dir2xzm $SNDSET/fakeroot/ $mods/soundcard_config.xzm
  if [ "$?" -ne 0 ]; then
    gtk_message_warn "Some error occurred.  Please try again." 450
  else
    gtk_message "Your soundcard_config.xzm module will now be activated when you boot Porteus." 450 gtk-yes
  fi
else
  ## The modules folder is not available
  dir2xzm $SNDSET/fakeroot/ /tmp/soundcard_config.xzm
  if [ "$?" -ne 0 ]; then
    gtk_message_warn "Some error occurred.  Please try again." 450
  else
    gtk_message_warn "Your porteus/modules folder was not found or is unwritable. Please copy the file /tmp/soundcard_config.xzm into the modules folder or base folder." 500
  fi
fi

}; export -f build_config_module
	
export SNDCONFIG='
<window image-name="/usr/share/pixmaps/porteus/audio-card.svg" window_position="1" title="Default Sound Card Selector" allow-shrink="false" width-request="550" height-request="450">
<vbox margin="10">
  <hbox>
    <pixmap><height>48</height><width>48</width><input file>"/usr/share/pixmaps/porteus/audio-card.svg"</input></pixmap>
    '`txtcolor 450 darkred x-large normal "            Porteus Sound Card Selector"`'
  </hbox>
    '`hsep`'
    <frame Choose your default sound card>
      <hbox>
      <text xalign="0" wrap="true" width-request="500"><label>"
When more than one sound device is attached to your system, you may experience problems with the wrong device being used as the default for ALSA and applications that use sound.

Please select your desired default sound card from the list below and click '"'Apply'"' to set this card as the default for the current session.  You can also select '"'Build'"' to create a module that will force the system to use the specified device as the default card every time you start up the system.
      
Please close all programs that use sound, such as browsers, media players and mixers.
"</label>        
      </text>
      </hbox>
      <hseparator></hseparator>
<hbox>
<vbox>
  <text use-markup="true" xalign="0" wrap="true"><label>"Default card:"</label></text>
<comboboxtext focus-on-click="false" width-request="250">
	<variable>PICKDEFBOX</variable>
	<input file>'$SNDSET'/cardlist</input>
</comboboxtext>
</vbox>
</hbox>   
    </frame>
  <hbox>
      <button tooltip-text="Exit this application">
      <label>Exit</label>
        <variable>EXIT</variable>
        <action type="exit">done</action>
        <input file stock="gtk-stop"></input>
     </button>
   
    <button tooltip-text="Play a sound to test the current configuration">
  	    <variable>TEST</variable>
		<label>Test</label>
	    <action type="command">mplayer /usr/share/sounds/Twinkle/question_asked.ogg</action>
		<input file>"/usr/share/pixmaps/porteus/preferences-desktop-sound.png"</input>
	</button>
	    <button tooltip-text="Build a module to apply these settings on future boot-ups">
  	    <variable>BUILD</variable>
		<label>Build</label>
	    <action type="command">echo default card is $PICKDEFBOX >> $SNDSET/dump</action>
		<input file icon="cdr"></input>
		<action type="function">build_config_module</action>
	</button>
	<button tooltip-text="Apply these settings to the live system">
  	    <variable>APPLY</variable>
  	    <sensitive>enabled</sensitive>
		<label>Apply</label>
	    <action type="command">echo default card is $PICKDEFBOX >> $SNDSET/dump</action>
		<input file stock="gtk-apply"></input>
		<action type="function">apply_live</action>
	    <action>disable:APPLY</action>
	    <action>enable:TEST</action>
	</button>

  </hbox>
</vbox>
<action signal="hide">exit:Cancel</action>
</window>
'
gtkdialog -p SNDCONFIG > /tmp/.snd_config

## Did user cancel ?
[ `egrep -o "Cancel|abort" /tmp/.snd_config` ] && clean_exit

clean_exit

