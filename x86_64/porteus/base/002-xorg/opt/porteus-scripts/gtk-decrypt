#!/usr/bin/python
## decrypt script in pygobject3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import subprocess
import tempfile
import os

class GtkDecrypt(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title = "Decrypt", border_width = 15, height_request = 250, width_request = 250, icon_name = "channel-insecure-symbolic")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">Select a file/folder to decrypt</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)

        self.text = Gtk.Label()
        self.text.set_markup("<span>The file that you choose will be decrypted and then the\n encrypted version will then removed from the system.</span>")
        self.vb.add(self.text)

        self.vb.pack_start(Gtk.Separator(), False, False, 10)
                
        self.hb = Gtk.Box(spacing = 5, homogeneous = False)
        self.hb.pack_start(Gtk.Label(label = "File:      "), False, False, 5)
        self.entry2 = Gtk.Entry()
        self.hb.pack_start(self.entry2, False, False, 5)
        self.add_file_button = Gtk.Button.new_from_icon_name("text-x-generic-symbolic", Gtk.IconSize.BUTTON)
        self.add_file_button.connect("clicked", self.on_add_file_button_clicked)
        self.hb.pack_start(self.add_file_button, False, False, 5)       
        self.vb.add(self.hb)        
         
        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)
        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)
        
        self.ok_button = Gtk.Button.new_with_label("OK")
        self.ok_button.connect("clicked", self.on_ok_clicked)
        # ~ self.ok_button.set_sensitive(False)
        self.hb_bottom.pack_end(self.ok_button, False, False, 2)        

        self.vb.pack_end(self.hb_bottom, False, False, 5)
        self.vb.pack_end(Gtk.Separator(), False, False, 10)
        self.add(self.vb)

    def on_add_file_button_clicked(self, button):
        dialog = Gtk.FileChooserDialog(title = "Choose a file to encrypt", parent = self,
            action = Gtk.FileChooserAction.OPEN)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
             "Select", Gtk.ResponseType.OK)
        dialog.set_default_size(800, 400)

        response = dialog.run()
        if Gtk.ResponseType.OK == response:
            # ~ self.add_file_path(dialog.get_filename())
            print("fixme")

        dialog.destroy()

    def on_ok_clicked(self, button):
        # Dummy
        # ~ subprocess.Popen(['encrypt command'], %s)
        dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = Gtk.MessageType.INFO, buttons = Gtk.ButtonsType.OK, text = "Encrypt")
        dialog.format_secondary_text("Your file has been encrypted")
        dialog.run()
        dialog.destroy()
        Gtk.main_quit()

    def on_cancel_clicked(self, button):
        Gtk.main_quit()

win = GtkDecrypt()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
