#!/bin/bash

## Script to check for porteus updates or fixes and download them
## Author: Brokenman <brokenman@porteus.org>

PUPSCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
. /usr/lib/librokenman
[ ! $DISPLAY ] && yellow "$PUPSCRIPT requires an xsession" && exit
exec 2>/dev/null
trap cleanup SIGHUP SIGINT SIGTERM
rm -rf /tmp/pupdate*

## Updater is disabled for rc releases
if [ `grep -o "rc[0-9]" /etc/porteus-version` ]; then
gtk_message "Due to the major version update in Porteus v3.0, the porteus updater has been disabled for all rc releases. Thankyou." 500 gtk-info
exit
fi

# Switch to root
TMP=/tmp/.gtkpns.tmp
if [ `whoami` != "root" ]; then
    echo $HOME > $TMP
    /opt/porteus-scripts/xorg/psu "$PUPSCRIPT" || sleep 1
    exit
	else
    [ ! -f $TMP ] && echo $HOME > $TMP
fi
pth=`<$TMP`
rm $TMP

get_desktop_session

edition=${wm} && unset wm

######################## Set variables
KDE=003-kde.xzm
LXQT=003-lxqt.xzm
XFCE=003-xfce.xzm
MATE=003-mate.xzm
SCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
WRK=/tmp/pupdate$$
DUMP=$WRK/dump
PIXMAPS=/usr/share/pixmaps/porteus

## Get architecture for server link
[ `uname -m|grep -o x86_64` ] && ARCHI=x86_64 || ARCHI=i486
export SRV=http://dl.porteus.org/$ARCHI/testing/updates

ver=`grep -o [0-9].[0-9] /etc/porteus-version|tr -d [:punct:]`
if [ $ver -lt 21 ]; then
gtk_message_custom "This application will only run on Porteus-v2.1 final or above. Please consider upgrading as many new additions and improvements can be enjoyed." 450 $PIXMAPS/stop-64.png
	exit
fi

## Initial setup
mkdir $WRK

## Check for base directory. This is needed to continue
PF=`grep -A1 "Porteus data found in:" /var/log/porteus-livedbg|tail -n1|sed 's@//@/@g'`

check_base_folder(){
BASEDIRECTORY=${PF}/base
if [ -n "$PF" -a ! "`grep -o emory <<<$PF`" ]; then
	BASEDIR=${BASEDIRECTORY%/*/*}
	PDIR=$PF
	BDIR=${BASEDIR}/boot
	[ ! -d $BDIR ] && unset BDIR
	OPTDIR=${PDIR/optional}
		else
	echo '
	'`start_window "Select module folder" cdr 500 300`'
	<hbox>
		'`pixmapicon 64 64 cdr`'
		'`txtcolor 400 darkred x-large normal "  Please locate your Porteus base folder"`'
		'`hsep`'
	</hbox>
		<frame>
			'`txtmarkup 460 "I was unable to locate your Porteus base folder! <b>This is required</b> to continue so you will need to <i>manually select</i> this folder using the button below. It is usually located on the boot media from which you launched Porteus and contains the module 000-kernel.xzm"`'
		</frame>
	<hbox>
		'`gtk_choose_file "Base folder:" "Choose your base folder" folder /mnt btnBoot BASEFOLDER`'
	</hbox>
	<hbox>
		'`butok`'
		'`butcancel`'
	</hbox>
	'`end_window`'
	'|gtkdialog -s > /tmp/.pupdate

## Check for user abort
	[ `egrep -o "Cancel|abort" /tmp/.pupdate` ] && { rm /tmp/.pupdate; exit; }

## Check for incorrect entry
	BASEDIRECTORY=`grep BASEFOLDER /tmp/.pupdate|cut -d'"' -f2`
	if [ -z $BASEDIRECTORY ]; then
		gtk_message_custom "You must select a directory. This is required in order to continue with this application." 450 $PIXMAPS/stop-64.png
		rm /tmp/.pupdate && $FUNCNAME
	fi
	if [ "`df -T $BASEDIRECTORY|tail -n1|awk '{print$1}'`" == "aufs" ]; then
		gtk_message "You must choose a location outside of the live file system. This means you can not choose a location such as /home/guest or /root." 500 gtk-dialog-warning
		rm /tmp/.pupdate && $FUNCNAME
	fi
yellow "Modules directory located!"
fi

## Is the base folder writable?
[ -w $BASEDIRECTORY ] && TARG=$BASEDIRECTORY || TARG=/tmp
}

check_base_folder

## Functions
cleanup(){
rm -rf /tmp/pupdate*
rm /tmp/.pupdate
}

## Check for internet
has_internet
if [ $answ -ne 0 ]; then
	gtk_message_custom "It appears you have no internet! Internet is required for this application to operate. Please check your connection and try again." 500 $PIXMAPS/stop-64.png
	cleanup
	unset answ
	exit
		else
	unset answ
fi

## Find which modules user is using and get appropriate updates.
mlmi=/mnt/live/memory/images
[ `ls $mlmi|grep -o $MATE` ] && mate=mate || mate=xxxxx
[ `ls $mlmi|grep -o $KDE` ] && kde=kde || kde=xxxxx
[ `ls $mlmi|grep -o $LXQT` ] && lxqt=lxde || lxqt=xxxxx
[ `ls $mlmi|grep -o $XFCE` ] && xfce=xfce || xfce=xxxxx
alldesktop=alldesktop

## Generate update lists
lynx -dump -nolist -nonumbers $SRV|grep .xzm|awk '{print$1}'|egrep "$mate|$kde|$lxqt|$xfce|$alldesktop" > $WRK/remote.txt &
ls -1 $BASEDIRECTORY > $WRK/local.txt

## Show an intro screen
echo '
'`start_window "Porteus updater" cdr 500 250`'
	<hbox>
		'`pixmapicon 64 64 cdr`'
		'`txtcolor 400 darkred x-large normal "  Porteus update and fix downloader"`'
		'`hsep`'
	</hbox>
		<frame>
			'`txtmarkup 460 "This application will check the Porteus server for any updates or fixes that are <b>not found</b> in your Porteus base folder. If any updates are available you will be able to choose to download them. Press OK to continue."`'
		</frame>
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check for user cancel
[ `egrep -o "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## parse remote list against local list
touch $WRK/required.txt
while read line; do
	if [ ! `grep $line $WRK/local.txt` ]; then
		echo $SRV/$line >> $WRK/required.txt
	fi
done < $WRK/remote.txt

## If required.txt is empty then no updates are available
if [ `wc -c < $WRK/required.txt` -lt 3 ]; then
	gtk_message "There are no updates available for your current version of Porteus." 420 gtk-yes
	cleanup
	exit
fi

## Show a list of updates and let user choose
modvar=1
echo '
'`start_window "Choose updates" cdr 500 350`'
	<hbox>
		'`pixmapicon 64 64 cdr`'
		'`txtcolor 400 darkred x-large normal "  Please choose your preferred updates"`'
		'`hsep`'
	</hbox>
		<frame>
			'`txtmarkup 460 "The current updates required by your computer are listed below. Please remove the tick from any updates you do not want. It is recommended to download all updates and keep them in your base folder."`'
		</frame>
	<vbox scrollable="true">
		'$(for a in `cat $WRK/required.txt`; do
			b=${a##*/}
			(( modvar++ ))
			echo '<checkbox active="true"><label>'$b'</label><variable>'$b-$modvar'</variable></checkbox>'
		done)'
	</vbox>
	<hbox>
		'`butstock btninfo Info gtk-file`'<action type="command">/opt/porteus-scripts/xorg/browser '$SRV'/changelog.txt &</action></button>
		'`butcustom "Download the chosen updates" "Download updates" butDownload stock gtk-go-down true`'</button>
		'`butcancel`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## Make a file of links
for a in `grep "true" $DUMP`; do
	## Remove -1 suffix
	b=${a%-*}
	echo $SRV/$b >> $WRK/links.txt
done

## Download the links
export STATE=DOWNLOAD
echo "Downloading ..." > /tmp/.cdload
manual_progress "Downloading" 
for a in `cat $WRK/links.txt`; do
	b=${a##*/}
	echo $b > /tmp/.cdload
	wget -o /tmp/.message $a -P $TARG
	sleep 1
	if [ ! -f $TARG/$b ]; then
		gtk_message "There was a problem downloading $b." 500 gtk-dialog-warning
		break
			else
		UPDATED=1
	fi
done
kill_manual_progress
cleanup
if [ $UPDATED ]; then
  if [ "$TARG" == "/tmp" ]; then
    gtk_message "Your updates have been downloaded to $TARG. You will need to manually place them intoy our Porteus base folder." 500 gtk-yes
      else
    gtk_message "Your updates have been downloaded. Please reboot porteus to activate updates." 500 gtk-yes
  fi
fi
exit
