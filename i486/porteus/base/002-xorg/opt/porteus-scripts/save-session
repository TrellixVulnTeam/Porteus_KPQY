#!/bin/bash

## Script to save current Porteus changes to module
## or save file container
## Author: Brokenman <brokenman@porteus.org>

THISSCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
. /usr/lib/librokenman
[ ! $DISPLAY ] && yellow "$THISSCRIPT requires an xsession" && exit
TMP=/tmp/psave$$
OPT=`ls -la /mnt/live/porteus/optional|awk '{print$NF}'`
PIXMAPS=/usr/share/pixmaps/porteus
PSSWRK=/tmp/savesession$$
DUMP=$PSSWRK/dump
mountpoint=/mnt/loopsave
CDIR=/mnt/live/memory/changes
if [ -z $OPT ]; then
	unset PDIR RCOPY MDIR
		else
	PDIR=${OPT%/*}/porteus
	RCOPY=${OPT%/*}/rootcopy
	MDIR=${OPT%/*}/modules
fi

## Switch to root
TMP=/tmp/.gtkpns.tmp
if [ `whoami` != "root" ]; then
    echo $HOME > $TMP
    /opt/porteus-scripts/xorg/psu "$THISSCRIPT" || sleep 1
    exit
	else
    [ ! -f $TMP ] && echo $HOME > $TMP
fi
pth=`<$TMP`
rm $TMP

## Check if user is running with console switch
[ $1 ] && MPATH=${1} || unset MPATH

### Functions
function cleanup(){
rm -rf /tmp/savesession*
rm -rf $PSSWRK
[ -d $mountpoint ] && rm -rf $mountpoint
[ -f /tmp/.message ] && rm /tmp/.message
}

function get_passphrase(){
secret=$PSSWRK/.passphrase
export GET_A_PASSPRASE='
<window window_position="1" title="Passphrase" width-request="400" icon-name="cdr" resizable="false">
<vbox margin="20">
	<text use-markup="true">
		<label>"Please provide a passphrase which will be used to decrypt your savefile container."</label>
	</text>
	<frame>
		<hbox>
			<text width-request="90"><label>Passphrase:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char">
				<default>""</default>
				<variable>pp</variable>
				<action signal="changed">enable:pp2</action>
			</entry>
		</hbox>
		<hbox>
			<text width-request="90"><label>Repeat:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char" sensitive="false">
				<default>""</default>
				<variable>pp2</variable>
			</entry>
		</hbox>
	</frame>
	<hbox>
		<button cancel></button>
		<button ok></button>
	</hbox>
</vbox>
<action signal="hide">exit:abort main window by X</action>
</window>'
gtkdialog -p GET_A_PASSPRASE > $secret
[ `egrep "Exit|exit|abort|Cancel|cancel" $secret` ] && { rm $secret; exit; }

## Make sure the passwords matched
sed -i 's@"@@g' $secret
p1=`grep "pp=" $secret|awk -F= '{print$NF}'`
p2=`grep "pp2=" $secret|awk -F= '{print$NF}'`
rm $secret
if [ "$p1" != "$p2" ]; then
	gtk_message "PASSWORDS DO NOT MATCH!!!" 500 gtk-dialog-warning
	unset p1 p2
	$FUNCNAME
	return
fi

## Make sure password is not blank
if [ -z "$p1" -o -z "$p2" ]; then
	gtk_message "BLANK PASSWORDS NOT ALLOWED!!!" 500 gtk-dialog-warning
	unset p1 p2
	$FUNCNAME
	return
fi
export PPHRASE=${p2}
unset p1 p2
}; export -f get_passphrase

function bad_passphrase(){
gtk_message "No key available with this passphrase." 500 gtk-dialog-warning
cleanup
exit
};export -f bad_passphrase

function check_loop(){
x=`ls -1 /dev/loop*|tr -d [:alpha:][:punct:]|sort -g|tail -n1`
let y=x+1
loop=/dev/loop$y
[ ! -e $loop ] && mknod $loop b 7 $y
}

## Setup dir
[ -d $PSSWRK ] && rm -rf $PSSWRK
mkdir -p $PSSWRK

make_changes_module(){
export STATE=manual
cat > $PSSWRK/exclude << EOF
tmp
dev
sys
var
EOF
echo "Building module" > /tmp/.message
manual_progress "Building module" &
mksquashfs /mnt/live/memory/changes $1 -noappend -ef $PSSWRK/exclude > $PSSWRK/output &
while [ ! "`grep "100%" $PSSWRK/output`" ]; do
tail -n1 $PSSWRK/output|awk '{print$NF}' > /tmp/.message
done
kill_manual_progress
}

if [ $MPATH ]; then
clear
echo "#########################################"
echo "Your current session will be saved to module:"
yellow "$MDIR/$MPATH"
echo
echo "Type yes to continue"
echo
read answer
if [ "$answer" == "yes" ]; then
cat > $PSSWRK/exclude << EOF
tmp
dev
sys
var
EOF
yellow "Building module ..."
mksquashfs $CDIR $MPATH -noappend -ef $PSSWRK/exclude
echo
cyan "Your module is ready:"
yellow "`du -h $MPATH`"
cleanup
exit
	else
cleanup
exit
fi
fi

## Choose savefile window
export CHOOSE_SAVEFILE='
'`start_window "Choose save file" cdr 430 350`'
	<hbox>
		'`pixmapfile 64 64 $PIXMAPS/magic-folder-128.png`'
		'`txtcolor 325 darkred x-large normal "  Choose a save file container"`'
	</hbox>
	<frame>
		'`txtmarkup 395 "Choose an existing savefile container or create a new one to save the current session. Encrypted containers are supported."`'
	</frame>
'`end_window`'
'

## Starting window
echo '
'`start_window "Save session" cdr 430 300`'
	<hbox>
		'`pixmapfile 64 64 $PIXMAPS/sync-128.png`'
		'`txtcolor 325 darkred x-large normal "  Porteus Session Saver"`'
	</hbox>
	<frame>
		'`txtmarkup 395 "This application can save your current Porteus session into a single module, save file or folder  that can be loaded everytime you boot. You can create a new save file or use an existing one. Encrypted save files are supported which will require a password at boot time."`'
	</frame>
	<hbox>
	'`butcustom "Save current session to a module" "Save to module" butModule icon cdr true`'</button>
	'`butcustom "save current session to a save file container" "Save to a file" butFile icon gtk-dnd true`'</button>
	'`butcustom "save current session to a folder" "Save to a folder" butFolder icon folder true`'</button>
	</hbox>
	<hbox>
	<button help></button>
	<button cancel></button>
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

ANSW=`grep "EXIT=" $DUMP|cut -d'"' -f2`
rm $DUMP

## Show help file if chosen
if [ "$ANSW" == "Help" ]; then
echo '
'`start_window "Help file" cdr 430 300`'
	<hbox>
		'`pixmapstock gtk-help`'
		'`txtcolor 325 darkred x-large normal "  Porteus Save Session help file"`'
	</hbox>
	<frame>
		'`txtmarkup 390 "This application enables you to save your current porteus session to a module, save file container or folder. If a module is chosen it should be placed into your <i>modules</i> folder for activation at boot time. If a save file is chosen then your <i>porteus.cfg</i> file will need to be edited to point to the save file using the <b>changes=</b> cheatcode."`'
	</frame>
	<hbox>
		'`butok`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP
$THISSCRIPT
fi

## If user chose module then show module window
TARG=`echo $MDIR|sed -e 's@/mnt/live@@g' -e 's@//@/@g'`
## If we have sniffed modules directory correctly then
## ask user if they want this location as target.
if [ "$ANSW" == "Save to module" -a "$MDIR" != "" ]; then
echo '
'`start_window "Choose a target location" cdr 430 300`'
	<hbox>
		'`pixmapicon 64 64 folder`'
		'`txtcolor 335 darkred x-large normal "  Choose a destination folder."`'
	</hbox>
		'`hsep`'
		<frame>
			'`txtmarkup 400 "Your save session module will be saved to:"`'
			'`txtmarkup 400 "<b>$TARG</b>"`'
			'`blankline`'
			'`txtmarkup 400 "Click OK or choose a different folder."`'
		</frame>
	<hbox>
		<text label="Folder:"></text>
		<entry editable="false" fs-title="Select an existing folder" fs-action="folder" fs-folder="/mnt">
			<variable>TARGET</variable>
		</entry>
		<button>
			<variable>butTarg</variable>
			<input file stock="gtk-directory"></input>
			<action>fileselect:TARGET</action>
		</button>
	</hbox>
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check if user cancelled
[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## Check if user changed default destination
	if [ "`grep "TARGET=" $DUMP|cut -d'"' -f2`" == "" ]; then
		TARGET=${TARG}
		METHOD=module
			else
		TARGET=`grep "TARGET=" $DUMP|cut -d'"' -f2`
		METHOD=module
	fi

## Make sure destination is NOT in aufs
	ISAUFS=`df -T $TARGET|grep -o aufs`
	if [ "$ISAUFS" ]; then
		gtk_message "You must choose a target directory outside of the aufs! This means you can NOT choose a path such as /home/guest or /root" 500 gtk-dialog-warning
		cleanup
		$THISSCRIPT
		exit
	fi
	make_changes_module $TARGET/changes-`date +"%y%m%d"`.xzm
	gtk_message "Your module is ready in $TARGET/changes-`date +"%y%m%d"`.xzm" 500 gtk-yes
	cleanup && exit
else
## No module folder was found
	if [ "$ANSW" == "Save to module" -a "$MDIR" == "" ]; then
echo '
'`start_window "Choose a target location" cdr 430 300`'
	<hbox>
		'`pixmapicon 64 64 folder`'
		'`txtcolor 335 darkred x-large normal "  Choose a destination folder."`'
	</hbox>
		'`hsep`'
		<frame>
			'`txtmarkup 400 "Your Porteus module folder could not be located. Please choose a destination to save your module. You will need to manually place the resulting module into your Porteus 'modules' folder."`'
		</frame>
	<hbox>
		<text label="Folder:"></text>
		<entry editable="false" fs-title="Select an existing folder" fs-action="folder" fs-folder="/mnt">
			<variable>TARGET</variable>
		</entry>
		<button>
			<variable>butTarg</variable>
			<input file stock="gtk-directory"></input>
			<action>fileselect:TARGET</action>
		</button>
	</hbox>
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check if user cancelled
[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## Check that user chose a directory
TARGET=`grep "TARGET=" $DUMP|cut -d'"' -f2`
		if [ "$TARGET" == "" ]; then
			gtk_message "You must choose a target directory!" 400 gtk-dialog-warning
			cleanup
			$THISSCRIPT
			exit
		fi

## Make sure destination is NOT in aufs
	is_on_aufs $TARGET
	if [ $answ -eq 0 ]; then
		gtk_message "You must choose a target directory outside of the aufs! This means you can NOT choose a path such as /home/guest." 400 gtk-dialog-warning
		cleanup
		$THISSCRIPT
		exit
	fi
	make_changes_module $TARGET/changes.xzm
	gtk_message "Your module is ready in $TARGET" 500 gtk-yes
	cleanup && exit
fi # closes "$ANSW" == "Save to module" -a "$MDIR" == ""
fi # closes "$ANSW" == "Save to module" -a "$MDIR" != ""

if [ "$ANSW" == "Save to a file" ]; then
METHOD=file
echo '
'`start_window "Save session to file" cdr 430 300`'
	<hbox>
		'`pixmapfile 64 64 $PIXMAPS/hd-128.png`'
		'`txtcolor 335 darkred x-large normal "  Choose a save file option."`'
	</hbox>
		'`hsep`'
	<frame>
		'`txtmarkup 400 "You may choose to save your current Porteus session to an existing save file <i>(with option to empty it first)</i> or you can create a new save file container for your changes. Encrypted save files are supported."`'
	</frame>
	<hbox>
		'`butcustom "Save session to an existing save file" "Save to existing file" butExisting stock gtk-file true`'</button>
		'`butcustom "Create a new save file to save your session in" "Create a new file" butNew stock gtk-new true`'<action type="command">make-changes</action></button>
		'`butcancel`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check if user cancelled
[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

FILEOPT=`grep "EXIT=" $DUMP|cut -d'"' -f2|awk '{print$1}'`
fi

if [ "$ANSW" == "Save to a folder" ]; then
echo '
'`start_window "Save session to folder" cdr 430 320`'
	<hbox>
		'`pixmapicon 64 64 folder`'
		'`txtcolor 335 darkred x-large normal "  Choose a target save folder."`'
	</hbox>
		'`hsep`'
	<frame>
		'`txtmarkup 400 "You may choose to save your current Porteus session to an existing folder. A subfolder called <b>changes</b> will be created in your chosen folder. After the process you will need to open your porteus.cfg file and change the <b>changes=</b> section to point to your target folder."`'
	</frame>
		'`chkbox false chkFresh "Remove previous changes"`'</checkbox>
	<hbox>
		<text label="Folder:" width-request="80"></text>
		<entry editable="false" fs-title="Select an existing folder" fs-action="folder" fs-folder="/mnt">
			<variable>SDIR</variable>
		</entry>
		<button>
			<input file stock="gtk-directory"></input>
			<action>fileselect:SDIR</action>
		</button>
	</hbox>
	<hbox>
		'`butok`'
		'`butcancel`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check if user cancelled
[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## Make sure a folder was chosen
SDIR=`grep "SDIR=" $DUMP|cut -d'"' -f2`
	if [ "$SDIR" == "" ]; then
		gtk_message "You must choose an existing folder!" 350 gtk-dialog-warning
		cleanup
		$THISSCRIPT
	fi

## Make sure folder is posix compatible
	make_posix_test $SDIR
	echo $answ
	if [ $answ -eq 1 ]; then
		unset answ
		gtk_message "This is not a POSIX compatible file system. You should choose a save file for this location instead." 450 gtk-dialog-warning
		cleanup
		$THISSCRIPT
		exit
			else
		unset answ
		echo "Passed posix test"
	fi

## Make sure location is not on aufs
	ISAUFS=`df -T $SDIR|grep -o aufs`
	if [ "$ISAUFS" ]; then
		gtk_message "You must choose somewhere otuside of the live aufs file system. This means you <b>can not</b> choose a location such as /home/guest or /root." 500 gtk-dialog-warning
		unset answ
		cleanup
		$THISSCRIPT
		exit
	fi


## Make sure partition has sufficient space
cat >> $PSSWRK/exclude.txt << EOF
sys
dev
mnt
tmp
EOF
	SESSIONSIZE=`du -s -X $PSSWRK/exclude.txt $CDIR|awk '{print$1}'`
	TARGETSIZE=`df $SDIR|tail -n1|awk '{print$4}'`
	if [ $SESSIONSIZE -gt $TARGETSIZE ]; then
		gtk_message "There is not sufficient space on this partition!" 450 gtk-dialog-warning
		cleanup
		exit
	fi

## Check if user chose to remove previous changes
grep "chkFresh" $DUMP|grep "true" && rm -rf $SDIR/changes >/dev/null 2>&1

## Create changes folder in target folder
	[ ! -d $SDIR/changes ] && mkdir $SDIR/changes

## Copy session to changes folder
	STATE=MANUAL
	echo "Copying files ..." > /tmp/.message
	manual_progress "Processing"
	cp -a $CDIR/. $SDIR/changes/ 2>/dev/null
	sleep 2
	kill_manual_progress
	gtk_message "Your files have been copied. You will need to open your porteus.cfg file and add changes=$SDIR to your boot line" 500 gtk-yes
	cleanup && exit
fi ## closes "$ANSW" == "Save to a folder"

if [ "$FILEOPT" == "Save" ]; then
echo '
'`start_window "Choose existing savefile" cdr 430 300`'
	<hbox>
		'`pixmapfile 64 64 $PIXMAPS/merge64.png`'
		'`txtcolor 335 darkred x-large normal "  Choose an existing save file."`'
	</hbox>
		'`hsep`'
	<frame>
		'`txtmarkup 400 "Select an existing save file container in which you will save your current session. Choose whether to add to changes or remove all previous changes first."`'
	</frame>
	<hbox>
		'`rbut true rbtAppend "Add to changes file"`'</radiobutton>
		'`rbut false rbtFresh "Remove previous changes"`'</radiobutton>
	</hbox>
	<hbox>
		<text label="Save file:" width-request="80"></text>
		<entry editable="false" fs-title="Select an existing folder" fs-action="file" fs-folder="/mnt">
			<variable>SDAT</variable>
		</entry>
		<button>
			<input file stock="gtk-directory"></input>
			<action>fileselect:SDAT</action>
		</button>
	</hbox>
	<hbox>
		'`butok`'
		'`butcancel`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP
## Check if user cancelled
[ `egrep "Cancel|abort" $DUMP` ] && { cleanup; exit; }

## Make sure user chose a file
SDAT=`grep "SDAT=" $DUMP|cut -d'"' -f2`
	if [ "$SDAT" == "" ]; then
		gtk_message "You must choose an existing save file!" 400 gtk-dialog-warning
		cleanup
		$THISSCRIPT
		exit
	fi
## Make sure save file  is not on aufs
        SDATPATH=${SDAT%/*}
        ISAUFS=`df -T $SDATPATH|grep -o "aufs"`
        if [ "$ISAUFS" ]; then
		gtk_message "Your save file can NOT reside inside the live file system!" 450 gtk-dialog-warning
		cleanup
		$THISSCRIPT
		exit
	fi
## We need to know if the container is encrypted
	if blkid $SDAT 2>/dev/null| grep -o _LUKS; then
		export ENCRYPTED=1
			else
		unset ENCRYPTED
	fi

## If container is encrypted then decrypt and mount
	if [ "$ENCRYPTED" ]; then
		echo "Savefile is encrypted!"
		[ ! -d $mountpoint ] && mkdir -p $mountpoint
		get_passphrase
		check_loop
		losetup $loop $SDAT
		cryptsetup luksOpen $loop crypt <<< $PPHRASE || bad_passphrase
		mount /dev/mapper/crypt $mountpoint
		[ `grep "rbtFresh=true" $DUMP` ] && rm -rf $mountpoint/* 2>/dev/null
## Make sure container has sufficient space
		cat >> $PSSWRK/exclude.txt << EOF
sys
dev
mnt
tmp
EOF
		SESSIONSIZE=`du -s -X $PSSWRK/exclude.txt $CDIR|awk '{print$1}'`
		CONTAINERSIZE=`df $mountpoint|tail -n1|awk '{print$4}'`
		if [ $SESSIONSIZE -gt $CONTAINERSIZE ]; then
			kill_manual_progress
			umount $mountpoint
			cryptsetup luksClose crypt
			losetup -d $loop
			gtk_message "Your save file does not have sufficient space!" 450 gtk-dialog-warning
			FAIL=1
			cleanup
			exit
		fi
## Copy the current session to mounted save file
		export STATE=MANUAL
		echo "Copying session to file" > /tmp/.message
		manual_progress "Please wait ..."
		cp -a $CDIR/. $mountpoint/
		pushd $mountpoint
		rm -rf sys dev mnt tmp
		popd
		echo "Unmounting savefile" > /tmp/.message
## Unmount and close seal save file
		sleep 2
		umount $mountpoint
		cryptsetup luksClose crypt
		losetup -d $loop
		kill_manual_progress
		if [ -z $FAIL ]; then
		gtk_message "Your session has been saved to $SDAT" 500 gtk-yes
		cleanup && exit
		fi
			else
		[ ! -d $mountpoint ] && mkdir -p $mountpoint
		mount -t auto -o loop $SDAT $mountpoint
		[ `grep "rbtFresh=true" $DUMP` ] && rm -rf $mountpoint/* >/dev/null 2>&1
		[ ! -d $mountpoint ] && mkdir -p $mountpoint
## Make sure container has sufficient space
		cat >> $PSSWRK/exclude.txt << EOF
sys
dev
mnt
tmp
EOF
		SESSIONSIZE=`du -s -X $PSSWRK/exclude.txt $CDIR|awk '{print$1}'`
		CONTAINERSIZE=`df $mountpoint|tail -n1|awk '{print$4}'`
		if [ $SESSIONSIZE -gt $CONTAINERSIZE ]; then
			FAIL=1
			umount $mountpoint
			gtk_message "Your save file does not have sufficient space!" 450 gtk-dialog-warning
			cleanup && exit
		fi
		export STATE=MANUAL
		echo "Copying session to file" > /tmp/.message
		manual_progress "Please wait ..."
		cp -a $CDIR/. $mountpoint/
		pushd $mountpoint
		rm -rf sys dev mnt tmp 2>/dev/null
		popd
		echo "Unmounting savefile" > /tmp/.message
## Unmount and close
		sleep 3
		umount $mountpoint
		kill_manual_progress
		if [ -z $FAIL ]; then
		gtk_message "Your session has been saved to $SDAT" 500 gtk-yes
		fi
		cleanup && exit
	fi
fi ## closes "$FILEOPT" == "Save"
kill_manual_progress
cleanup


